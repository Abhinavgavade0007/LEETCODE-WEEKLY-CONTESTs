
3683. Earliest Time to Finish One Task

class Solution {
public:
    int earliestTime(vector<vector<int>>& tasks) {
        int n=tasks.size();
        int mini=INT_MAX;
        for(int i=0;i<n;i++) {
            int st=tasks[i][0];
            int ed=tasks[i][1];
            mini=min(mini,st+ed);
        }
        return mini;
    }
};

3684. Maximize Sum of At Most K Distinct Elements

class Solution {
public:
    vector<int> maxKDistinct(vector<int>& nums, int k) {
        sort(nums.rbegin(),nums.rend());
        set<int>st;
        for(auto it:nums) {
            if(st.size() == k) break;
            st.insert(it);
        }
        vector<int>ans;
        for(auto it:st) {
            ans.push_back(it);
        }
        sort(ans.rbegin(),ans.rend());
        return ans;
    }
};
